准备环境：
1、在物理主机上安装ansible
[root@room8pc16 zzg_pypkgs]# cd ansible_pkg/
# pip3 install *
或
# pip3 install ansible
2、准备三台虚拟机
node4.tedu.cn  192.168.4.4
node5.tedu.cn  192.168.4.5
node6.tedu.cn  192.168.4.6
三台虚拟机只需要配置IP地址和主机名即可

3、创建ansible工作目录
[root@room8pc16 day06]# mkdir myansible
[root@room8pc16 day06]# cd myansible
[root@room8pc16 myansible]# vim ansible.cfg
[defaults]
inventory = hosts
remote_user = root
[root@room8pc16 myansible]# vim hosts
[dbservers]
node4.tedu.cn

[webservers]
node5.tedu.cn
node6.tedu.cn

4、配置名称解析
[root@room8pc16 myansible]# for i in {1..254}
> do
> echo -e "192.168.4.$i\tnode$i.tedu.cn\tnode$i" >> /etc/hosts
> done

5、收集远程主机密钥                 //vim /etc/ssh/ssh_config   StrictHostKeyChecking=no
[root@room8pc16 ~]# ssh-keyscan node{4..6} node{4..6}.tedu.cn 192.168.4.{4..6} >> .ssh/known_hosts

6、执行ad-hoc临时命令
[root@room8pc16 myansible]# ansible all -m ping -k
[root@room8pc16 myansible]# ansible all -m shell -a "id root; id zhangsan" -k

7、修改vim的配置：如果是yaml文件，按tab键是两个空格、支持自动缩进、将tab转换为空格
[root@room8pc16 ~]# vim ~/.vimrc
autocmd FileType yaml setlocal sw=2 ts=2 et ai

8、通过playbook完成密钥分发
[root@room8pc16 ~]# ansible-doc authorized_key
[root@room8pc16 myansible]# vim auth.yml
---
- name: auth key
  hosts: all
  tasks:
    - name: upload pub key
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
# 检查语法
[root@room8pc16 myansible]# ansible-playbook --syntax-check auth.yml
# 执行
[root@room8pc16 myansible]# ansible-playbook auth.yml -k
# 测试，执行ansible任务，不再需要输入密码
[root@room8pc16 myansible]# ansible all -m ping

9、集中部署yum
[root@room8pc16 myansible]# mkdir files
[root@room8pc16 myansible]# vim files/centos.repo
[centos]
name=centos
baseurl=ftp://192.168.4.254/centos7.4
gpgcheck=0
[root@room8pc16 myansible]# vim yum.yml
---
- name: upload yum repo file
  hosts: all
  tasks:
    - name: upload centos.repo
      copy:
        src: files/centos.repo
        dest: /etc/yum.repos.d/centos.repo
[root@room8pc16 myansible]# ansible-playbook --syntax-check yum.yml
[root@room8pc16 myansible]# ansible-playbook yum.yml
[root@room8pc16 myansible]# ansible all -m shell -a "yum repolist"


10、部署LAMP环境
[root@room8pc16 myansible]# vim lamp.yml
---
- name: config dbservers
  hosts: dbservers
  tasks:
    - name: install dbservers pkgs
      yum:
        name: mariadb-server
        state: present
    - name: config dbservers services
      service:
        name: mariadb
        state: started
        enabled: yes

- name: config webservers
  hosts: webservers
  tasks:
    - name: install webservers pkgs
      yum:
        name: [httpd, php, php-mysql]
        state: latest
    - name: config webservers services
      service:
        name: httpd
        state: started
        enabled: yes
[root@room8pc16 myansible]# ansible-playbook --syntax-check lamp.yml
[root@room8pc16 myansible]# ansible-playbook lamp.yml

import shutil
from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars.manager import VariableManager
from ansible.inventory.manager import InventoryManager
from ansible.playbook.play import Play
from ansible.executor.task_queue_manager import TaskQueueManager
import ansible.constants as C

# since API is constructed for CLI it expects certain options to always be set, named tuple 'fakes' the args parsing options object
# 这里只是定义执行ansible时的选项，参见ansible --help
# connection: 连接的类型，有local(本机执行)/ssh(通过ssh执行)/smart(智能选择)
# module_path: 自定义的模块路径
# forks: 并行执行程序的进程数
# become相关：建议使用普通用户连接远程服务器，执行操作的时候再切换成root，become指定切换成哪个用户，切换的方法是什么
# check: 不真正的执行命令，而是预言将会发生什么
# diff: 当改变文件或模板时，指出修改了什么
Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])
options = Options(connection='ssh', module_path=['/to/mymodules'], forks=10, become=None, become_method=None, become_user=None, check=False, diff=False)

# initialize needed objects
# loader: 负责查找和读取yaml、json和ini文件，能够在文件中取出正确的数据
loader = DataLoader() # Takes care of finding and reading yaml, json and ini files
# 存储各种各样的密码
passwords = dict()

# create inventory, use path to host config file as source or hosts in a comma separated string
# 定义主机清单，可以采用两种方式：
# sources='用逗号分开的所有的主机'
# sources=[主机清单文件]
# inventory = InventoryManager(loader=loader, sources='localhost,')
inventory = InventoryManager(loader=loader, sources=['myansible/hosts'])

# variable manager takes care of merging all the different sources to give you a unifed view of variables available in each context
# 定义变量管理器
variable_manager = VariableManager(loader=loader, inventory=inventory)

# create datastructure that represents our play, including tasks, this is basically what our YAML loader does internally.
# 创建要执行的play源
play_source=dict(
        name="my ansible play",
        hosts='webservers',  # 指定在哪些主机上执行任务
        gather_facts='no',  # 不收集主机的信息
        tasks=[  # 定义在主机上执行的任务
            dict(action=dict(module='shell', args='ls -ld /home'), register='shell_out'),
            dict(action=dict(module='debug', args=dict(msg='{{shell_out.stdout}}')))
         ]
    )

# Create play object, playbook objects use .load instead of init or new methods,
# this will also automatically create the task objects from the info provided in play_source
# 创建play实例
play = Play().load(play_source, variable_manager=variable_manager, loader=loader)

# Run it - instantiate task queue manager, which takes care of forking and setting up all objects to iterate over host list and tasks
tqm = None
try:
    tqm = TaskQueueManager(
              inventory=inventory,
              variable_manager=variable_manager,
              loader=loader,
              options=options,
              passwords=passwords,
          )
    result = tqm.run(play) # most interesting data for a play is actually sent to the callback's methods
finally:
    # we always need to cleanup child procs and the structres we use to communicate with them
    # 清理任务
    if tqm is not None:
        tqm.cleanup()

    # Remove ansible tmpdir
    # 删除临时目录
    shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)

函数的形式
import shutil
from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars.manager import VariableManager
from ansible.inventory.manager import InventoryManager
from ansible.playbook.play import Play
from ansible.executor.task_queue_manager import TaskQueueManager
import ansible.constants as C

def ad_hoc(inventory_fname, hosts, module, args):
    Options = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])
    options = Options(connection='ssh', module_path=[''], forks=10, become=None, become_method=None, become_user=None, check=False, diff=False)
    loader = DataLoader()
    passwords = dict()
    inventory = InventoryManager(loader=loader, sources=inventory_fname)
    variable_manager = VariableManager(loader=loader, inventory=inventory)
    play_source=dict(
            name="my ansible play",
            hosts=hosts,
            gather_facts='no',
            tasks=[
                dict(action=dict(module=module, args=args), register='shell_out'),
                dict(action=dict(module='debug', args=dict(msg='{{shell_out.stdout}}')))
             ]
        )
    play = Play().load(play_source, variable_manager=variable_manager, loader=loader)

    tqm = None
    try:
        tqm = TaskQueueManager(
                  inventory=inventory,
                  variable_manager=variable_manager,
                  loader=loader,
                  options=options,
                  passwords=passwords,
              )
        result = tqm.run(play)
    finally:
        if tqm is not None:
            tqm.cleanup()

        shutil.rmtree(C.DEFAULT_LOCAL_TMP, True)

if __name__ == '__main__':
    inventory_fname = ['myansible/hosts']
    hosts = "webservers"
    module = "shell"
    args = "ls -ld /home"
    ad_hoc(inventory_fname, hosts, module, args)
    ad_hoc(inventory_fname, 'dbservers', module, 'mkdir /tmp/mydemo')
 
 playbook
 from collections import namedtuple
from ansible.parsing.dataloader import DataLoader
from ansible.vars.manager import VariableManager
from ansible.inventory.manager import InventoryManager
from ansible.executor.playbook_executor import PlaybookExecutor

Options = namedtuple(
    'Options',
    [
        'connection',
        'remote_user',
        'ask_sudo_pass',
        'verbosity',
        'ask_pass',
        'module_path',
        'forks',
        'become',
        'become_method',
        'become_user',
        'check',
        'listhosts',
        'listtasks',
        'listtags',
        'syntax',
        'sudo_user',
        'sudo',
        'diff'
    ]
)
options = Options(
    connection='smart',
    remote_user=None,
    ask_pass=None,
    sudo_user=None,
    forks=5,
    sudo=None,
    ask_sudo_pass=False,
    verbosity=5,
    module_path=None,
    become=None,
    become_method=None,
    become_user=None,
    check=False,
    diff=False,
    listhosts=None,
    listtasks=None,
    listtags=None,
    syntax=None
)

def run_pb(sources, pb_path):
    loader = DataLoader()
    passwords = dict()
    inventory = InventoryManager(loader=loader, sources=sources)
    variable_manager = VariableManager(loader=loader, inventory=inventory)
    pb = PlaybookExecutor(
        playbooks=pb_path,
        inventory=inventory,
        variable_manager=variable_manager,
        loader=loader,
        options=options,
        passwords=passwords
    )
    result = pb.run()
    return result

if __name__ == '__main__':
    sources = ['myansible/hosts']
    playbook = ['myansible/lamp.yml']
    run_pb(sources, playbook)



download.py
#!/usr/bin/env python

import wget
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            url=dict(required=True, type='str'),
            path=dict(required=True, type='str')
        )
    )
    wget.download(module.params['url'], module.params['path'])
    module.exit_json(changed=True)

if __name__ == '__main__':
    main()

remote_cp
#!/usr/bin/env python

import shutil
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            yuan=dict(required=True, type='str'),
            mubiao=dict(required=True, type='str')
        )
    )
    shutil.copy(module.params['yuan'], module.params['mubiao'])
    module.exit_json(changed=True)

if __name__ == '__main__':
    main()
