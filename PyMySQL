pypi即python package index
是python语言的软件仓库
官方站点为https://pypi.python.org

使用国内镜像站点
为了实现安装加速,可以配置pip安装时采用国内镜像站点
[root@localhost	~]#	mkdir	~/.pip/	
[root@localhost	~]#	vim	~/.pip/pip.conf		
[global]	
index-url=hKp://pypi.douban.com/simple/	
[install]	
trusted-host=pypi.douban.com	

[root@one ~]# pypi install pymysql

关系型数据库，记录的数据要尽量减少冗余。如果出现大量冗余，可以考虑把信息发到不同表里
应该将字段存入三张表：
员工表：
工号、姓名、性别、出生日期、联系方式、部门ID
部门表：
部门ID、部门
工资表：
工号、工资日、基本工资、奖金、工资总额

数据库范式：
1、所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是
原子性的，即数据库表的每一列都是不可分割的原子数据项
根据1NF，联系方式不合适，可以分成：家庭住址、电话号码、EMAIL
2、第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。简单来说，就是
每行记录需要有个主键
根据据2NF，工资表需要加个主键，可以加一个“行号”作为主键
3、第三范式（3NF）在满足2NF的基础上，任何非主属性不得依赖于其他非主属性。
工资表中的工资总额不能存在，因为它依赖基本工资和奖金
4、最终表
员工表：
工号、姓名、性别、出生日期、家庭住址、电话号码、EMAIL、部门ID
部门表：
部门ID、部门
工资表：
auto_id、工号、工资日、基本工资、奖金

import pymysql

conn = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='tedu.cn',
    db='nsd1810',
    charset='utf8'
)
cursor = conn.cursor()    #cursor 光标

create_dep = '''create table department(
dep_id INT , dep_name VARCHAR (20) NOT NULL UNIQUE ,
PRIMARY KEY (dep_id)
)'''
cursor.execute(create_dep)

create_emp = '''create table employess(
emp_id INT , name VARCHAR (20) , birth_date DATE ,
 dep_id INT , PRIMARY KEY (emp_id) , FOREIGN KEY (dep_id)
 REFERENCES department(dep_id)
 )'''
cursor.execute(create_emp)

create_sal = '''create table salary(
auto_id INT , date DATE , emp_id INT ,basic INT , awards INT ,
PRIMARY KEY (auto_id), FOREIGN KEY (emp_id) REFERENCES employess(emp_id)
)'''
cursor.execute(create_sal)

cursor.close()
conn.close()

插入操作
import pymysql

conn = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='tedu.cn',
    db='nsd1810',
    charset='utf8'
)
cursor = conn.cursor()
insert1 = 'insert into department VALUE (%s,%s)'
cursor.execute(insert1,(1,'人事部'))
cursor.executemany(insert1,[(2,'运维部')])
cursor.executemany(insert1,[(3,'开发部'),(4,'行政部')])

conn.commit()
cursor.close()
conn.close()

查询操作
import pymysql

conn = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='tedu.cn',
    db='nsd1810',
    charset='utf8'
)
cursor = conn.cursor()
select1 = 'select * from department ORDER BY dep_id'
cursor.execute(select1)

result = cursor.fetchone()    #如输出所示 cursor.fetchone()是指针型
print(result)
print('*' * 30)
result2 = cursor.fetchmany(2)   #fetch 取
print(result2)
print('*' * 30)
result3 = cursor.fetchall()
print(result3)

conn.commit()
cursor.close()
conn.close()

输出
(1, '人事部')
******************************
((2, '运维部'), (3, '开发部'))
******************************
((4, '行政部'),)
import pymysql

conn = pymysql.connect(
    host='127.0.0.1',
    port=3306,
    user='root',
    passwd='tedu.cn',
    db='nsd1810',
    charset='utf8'
)
cursor = conn.cursor()
select2 = 'SELECT * FROM department order by dep_id'
cursor.execute(select2)
cursor.scroll(4)   # 默认以相对方式，从当前位置向下移动
result = cursor.fetchone()
print(result)
print('*' * 30)
cursor.scroll(0, mode='absolute')  # absolute一定是从开头移动
result2 = cursor.fetchone()
print(result2)
conn.commit()
cursor.close()
conn.close()
输出 
(4, '行政部')
##############################
(1, '人事部')

# update1 = 'UPDATE department SET dep_name=%s WHERE dep_name=%s'
# cursor.execute(update1, ('人力资源部', '人事部'))

delete1 = 'DELETE FROM department WHERE dep_id=%s'
cursor.execute(delete1, (6,))

sqlalchemy
ORM 对象关系映射
安装
[root@localhost	packages]#	pip3 install sqlalchemy

python 创建sql引擎
from sqlalchemy import create_engine, Column, Integer, String, Date, ForeignKey
from sqlalchemy.ext.declarative import declarative_base    #声明系统,定义基类 
from sqlalchemy.orm import sessionmaker    #创建会话类

engine = create_engine(
    # 用户名:密码@服务器/数据库?参数
    'mysql+pymysql://root:tedu.cn@127.0.0.1/tedu1810?charset=utf8',
    encoding='utf8',
    echo=True  # 在屏幕终端输出详细日志，生产环境不要设置
)
Base = declarative_base()     #定义基类
Session = sessionmaker(bind=engine)   #ORM访问数据库的句柄被称作Session

class Departments(Base):
    __tablename__ = 'departments'
    dep_id = Column(Integer, primary_key=True)
    dep_name = Column(String(20), unique=True, nullable=False)

    def __str__(self):
        return '%s : %s' % (self.dep_id, self.dep_name)

class Employees(Base):
    __tablename__ = 'employees'
    emp_id = Column(Integer, primary_key=True)
    emp_name = Column(String(20))
    birth_date = Column(Date)
    email = Column(String(50))
    dep_id = Column(Integer, ForeignKey('departments.dep_id'))

    def __str__(self):
        return self.emp_name

if __name__ == '__main__':
    Base.metadata.create_all(engine)
    
Session 创建信息 如同insert 
from sql_alcemy import Departments, Employees, Session

session = Session()
hr = Departments(dep_id=1, dep_name='人事部')
session.add(hr)
dev = Departments(dep_id=2, dep_name='开发部')
ops = Departments(dep_id=3, dep_name='运维部')
market = Departments(dep_id=4, dep_name='市场部')
finance = Departments(dep_id=5, dep_name='财务部')
session.add_all([dev, ops, market, finance])

dzh = Employees(
    emp_id=1,
    emp_name='董志华',
    birth_date='1993-4-15',
    email='dzh@qq.com',
    dep_id=2
)

zk = Employees(
    emp_id=2,
    emp_name='猪昆',
    birth_date='1992-2-10',
    email='zk@qq.com',
    dep_id=5
)

eb = Employees(
    emp_id=3,
    emp_name='二B',
    birth_date='1998-11-11',
    email='erb@qq.com',
    dep_id=3
)

mlb = Employees(
    emp_id=4,
    emp_name='孟乐博',
    birth_date='1990-8-31',
    email='mlb@qq.com',
    dep_id=1
)

nmb = Employees(
    emp_id=5,
    emp_name='牛莫夯',
    birth_date='1983-7-9',
    email='nmb@qq.com',
    dep_id=4
)

session.add_all([dzh, zc, fxq, mca, rwj])
session.commit()
session.close()

查询
qset = session.query(Departments)
print(qset1) #此时qset1只是一条sql语句,向qset1取值时,才是真正查询数据库
print(qset1.all()) #返回departments表中所有记录组成得对象集合
for dep in qset1:
    print('%s : %s' % (dep.dep_id,dep.dep_name))

查询排序

qset2 = session.query(Departments).order_by(Departments.dep_id)
print(qset2)
for dep in qset2:
    print('%s : %s' % (dep.dep_id, dep.dep_name))
    
查询带条件,返回元组，部返回实例
qset3 = session.query(Employees.emp_name, Employees.email)
print(qset3)
for item in qset3:
    print(item)
for name, email in qset3:
    print('%s:%s' % (name, email))
    
qset4 = session.query(Departments.dep_name.label('部门'))
for dep in qset4:
    print(dep.部门)
    
qset5 = session.query(Departments).order_by(department.dep_id)[2:4]
for dep in qset5:
    print ('%s : %s ' %(dep.dep_id, dep.dep_name))

qset6 = session.query(Departments).filter(department.dep_id == 1)
print(qset6)
for dep in qset6:
    print('%s: %s' % (dep.dep_id, dep.dep_name))

# qset7 = session.query(Departments).filter(Departments.dep_name.in_(['人事部', '开发部']))
# for dep in qset7:
#     print('%s: %s' % (dep.dep_id, dep.dep_name))
# qset8 = session.query(Departments).filter(~Departments.dep_name.in_(['人事部', '开发部']))
# print('*' * 30)
# for dep in qset8:
#     print('%s: %s' % (dep.dep_id, dep.dep_name))
#############################################
from sqlalchemy import and_
qset9 = session.query(Departments).filter(and_(Departments.dep_id>=2, Departments.dep_id<=4))
for dep in qset9:
    print('%s: %s' % (dep.dep_id, dep.dep_name))
