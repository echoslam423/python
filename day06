在本地文件下创建一个文件 实现记账功能
 from time import strftime
 import os
 import pickle


 def check_in(fname):
     imNum = int(input('输入存款的钱数:'))
     imdis = input('存款说明:')
     date = strftime('%F')
     #    Num=10000+imNum
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
         balance = records[-1][-2] + imNum
         records.append([date, imNum, 0, balance, imdis])
     # billIn=bill.append([datetime.day,0,imNum,Num,imdis])
     with open(fname, 'wb') as fobj:
         pickle.dump(records, fobj)


 def check_out(fname):
     imNum = int(input('输入存款的钱数:'))
     imdis = input('存款说明:')
     date = strftime('%F')
     #    Num=10000+imNum
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
         balance = records[-1][-2] - imNum  # 大列表倒数第一项下的小列表倒数第二个值
         records.append([date, imNum, balance, 0, imdis])
     # billIn=bill.append([datetime.day,0,imNum,Num,imdis])
     with open(fname, 'wb') as fobj:
         pickle.dump(records, fobj)


 def lookup(fname):
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
     print('%-12s%-8s%-8s%-12s%-15s' % ('date', 'save', 'cost', 'balance', 'init'))
     for record in records:
         print('%-12s%-8s%-8s%-12s%-15s' % tuple(record))


 def menu():
     fname = 'account.data'
     adict = {'0': check_in, '1': check_out, '2': lookup}
     alist = '''(0)存款
 (1)支出
 (2)查帐
 (3)退出
 请输入选项(0/1/2/3):'''

     if not os.path.exists(fname):
         line = [strftime('%Y-%m-%d'), 0, 0, 10000, 'init']
         with open(fname, 'wb') as fobj:
             pickle.dump([line], fobj)

     while 1:
         choice = input(alist)
         if choice not in ['0', '1', '2', '3']:
             print('无效的输入')
             continue

         if choice == '3':
             break

         adict[choice](fname)


 if __name__ == '__main__':
     print(menu())
     
 >>> def get_age(name, age):
...     print('%s is %s years old' % (name, age))

>>> get_age('bob', 20)   # ok
>>> get_age(20, 'bob')   # 没有语法错误，但是语义不对
>>> get_age(age=20, name='bob')   # ok
>>> get_age(age=20, 'bob')   # 语法错误，key=val的形式，必须在后面
>>> get_age(20, name='bob')
# 20按函数定义的顺序传给了name，后面又指定name='bob'，所以name得到多个值，报错
>>> get_age('bob', age=20)   # OK

 def fun1(*args): # *表示传入的参数是元组
     print(args)

 def fun2(**kwargs):  #**表示传入的是字典
     print(kwargs)

 print(fun1('bob','tom','jerry'))
 print(fun2(name='bob',age=20))


 def add(x, y):
     return x + y


 def get_age(name, age):
     print('%s is %s years old' % (name, age))


 if __name__ == '__main__':
     nums = [10, 20]
     print(add(nums[0], nums[1]))
     print(add(*nums))  # *表示把nums拆开
     adict = {'age': 20, 'name': 'bob'}
     get_age(**adict)

随机生成两个100以内的数字
随机选择加法或是减法
总是使用大的数字减去小的数字
如果用户答错三次,程序给出正确答案


from random import randint, choice


def exam():
    nums = [randint(1, 100) for i in range(2)]
    nums.sort(reverse=True)
    op = choice('+-')
    if op == '+':
        result = nums[0] + nums[1]
    else:
        result = nums[0] - nums[1]
    prompt = '%s %s %s =' % (nums[0], op, nums[1])
    answer = int(input(prompt))
    if answer == result:
        print('答对了')
    else:
        print('答错了')


def mainMenu():
    while 1:
        exam()
        yn = input('Continue(y/n)').strip()[0]  # 取出用户第一个非空字符
        if yn in 'nN':
            print('\nbye')
            break


if __name__ == '__main__':
    mainMenu()

加入错误识别的版本
def add(x, y):
    return x + y

def sub(x, y):
    return x - y

def exam():
    cmds = {'+': add, '-': sub}           //cmds = {'+': lambda x, y: x + y, '-': lambda x, y: x - y} 匿名函数 可以省略定义add sub
    nums = [randint(1, 100) for i in range(2)]
    nums.sort(reverse=True)  # 默认升序，改为降序
    op = choice('+-')
    result = cmds[op](*nums)
    prompt = '%s %s %s = ' % (nums[0], op, nums[1])
    counter = 0

    while counter < 3:
        try:
            answer = int(input(prompt))
        except:
            print()
            continue

        if answer == result:
            print('Very Good!')
            break
        print('Wrong Answer!')
        counter += 1
    else:
        print('%s%s' % (prompt, result))

def main():
    while True:
        exam()
        try:
            yn = input('Continue(y/n)? ').strip()[0]  # 取出用户输入的第一个非空字符
        except IndexError:
            continue
        except (KeyboardInterrupt, EOFError):
            yn = 'n'
        
        if yn in 'nN':
            print('\nBye-bye')
            break


if __name__ == '__main__':
    main()

filter(func, seq):调用一个布尔函数func来迭代遍历每个序列中的元素;返回一个使func返回值为true的元素的序列
>>>	data	=	filter(lambda	x:	x	%	2,	[num	for	num	in	range(10)])	
>>>	print(data)									#过滤出10以内的奇数
[1,	3,	5,	7,	9]	

from random import randint


def fun1(num):
    return num % 2


if __name__ == '__main__':
    alist = [randint(1, 100) for i in range(10)]
    # for a in alist:
    result = filter(fun1, alist)  # 返回值1即为True 0是False
    # print(fun1(a))
    print(list(result))
    # filter将它第二个参数中每一项,作为第一个参数(函数)的参数传递
    # 如果func1的返回值是True就留下来,否则过滤

result2 = filter(lambda num: num % 2, alist)
print(list(result2))

# filter()是函数过滤 返回值1即为True 0是False
# map() 是函数加工

全局变量：在顶级代码中定义的变量，全局变量一旦定义，在定义开始一直到程序结束，任何
地方都可见、可用
>>> x = 10    # 全局变量
>>> def foo():
...     print(x)   # 打印全局变量x
...
>>> foo()
10
局部变量：在函数内部定义，只有函数运行期间可见可用
>>> def bar():
...     hi = 'hello world'
...     print(hi)
...
>>> bar()
hello world
>>> print(hi)   # NameError，全局不能访问局部变量

如果全局和局部有同名变量，局部变量就把全局变量遮盖住了
>>> x = 10
>>> def foo():
...     x = 100
...     print(x)
...
>>> foo()
100
>>> print(x)
10

如果真的希望在局部使用全局变量，需要在函数内通过global语句进行声明
>>> x = 10
>>> def foo():
...     global x   # 声明此处的x是全局的x
...     x = 100
...     print(x)
...
>>> print(x)    # 函数定义，不会执行函数内的代码，所以此处的x仍然是10
10
>>> foo()    # 调用函数，函数将把全局的x值改掉
100
>>> print(x)   # 全局的x值已变为100
100


from functools import partial  偏函数

def add(a,b,c,d,e,f):
    return (a+b+c+d+e+f)
myadd = partial(add,10,20,30,40,50)
print(myadd(1))
print(myadd(10))


做一个简单窗口程序

import tkinter
from functools import partial

window = tkinter.Tk()
lb = tkinter.Label(window, text="Hello world!", font="Arial, 20")
b1 = tkinter.Button(window, fg='white', bg='blue', text='Button 1')
#用偏函数固定其他几个参数 生成新的button
Mybutton=partial(tkinter.Button, window, fg='white',bg='blue')
b2 = Mybutton(text="Button 2")
b3=Mybutton(text="Quit",command=window.quit)

lb.pack()           #执行方法,把创建的label真正的安装在window上
b1.pack()
b2.pack()
b3.pack()

window.mainloop()    #窗体方法,用于启动GUI界面程序


# 递归函数
def fact(n):
    if n == 1:
        return 1

    return n * fact(n - 1)


if __name__ == '__main__':
    print(fact(5))
    
快速排序

def qsort(seq):
    if len(seq) < 2:
        return seq

    middle=seq[0]
    smaller=[]
    larger=[]
    for item in seq[1:]:
        if item <= middle:
            smaller.append(item)
        else:
            larger.append(item)

    return qsort(smaller) + [middle] + qsort(larger)

if __name__ == '__main__':
    alist = [randint(1,100) for i in range(10)]
    print(alist)
    print(qsort(alist))
    
生成器是一个带yield语句的函数一个函数或者子程序只返回一次,但一个生成器能暂停执行并返回一个中间的结果
