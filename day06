在本地文件下创建一个文件 实现记账功能
 from time import strftime
 import os
 import pickle


 def check_in(fname):
     imNum = int(input('输入存款的钱数:'))
     imdis = input('存款说明:')
     date = strftime('%F')
     #    Num=10000+imNum
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
         balance = records[-1][-2] + imNum
         records.append([date, imNum, 0, balance, imdis])
     # billIn=bill.append([datetime.day,0,imNum,Num,imdis])
     with open(fname, 'wb') as fobj:
         pickle.dump(records, fobj)


 def check_out(fname):
     imNum = int(input('输入存款的钱数:'))
     imdis = input('存款说明:')
     date = strftime('%F')
     #    Num=10000+imNum
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
         balance = records[-1][-2] - imNum  # 大列表倒数第一项下的小列表倒数第二个值
         records.append([date, imNum, balance, 0, imdis])
     # billIn=bill.append([datetime.day,0,imNum,Num,imdis])
     with open(fname, 'wb') as fobj:
         pickle.dump(records, fobj)


 def lookup(fname):
     with open(fname, 'rb') as fobj:
         records = pickle.load(fobj)
     print('%-12s%-8s%-8s%-12s%-15s' % ('date', 'save', 'cost', 'balance', 'init'))
     for record in records:
         print('%-12s%-8s%-8s%-12s%-15s' % tuple(record))


 def menu():
     fname = 'account.data'
     adict = {'0': check_in, '1': check_out, '2': lookup}
     alist = '''(0)存款
 (1)支出
 (2)查帐
 (3)退出
 请输入选项(0/1/2/3):'''

     if not os.path.exists(fname):
         line = [strftime('%Y-%m-%d'), 0, 0, 10000, 'init']
         with open(fname, 'wb') as fobj:
             pickle.dump([line], fobj)

     while 1:
         choice = input(alist)
         if choice not in ['0', '1', '2', '3']:
             print('无效的输入')
             continue

         if choice == '3':
             break

         adict[choice](fname)


 if __name__ == '__main__':
     print(menu())
     
 >>> def get_age(name, age):
...     print('%s is %s years old' % (name, age))

>>> get_age('bob', 20)   # ok
>>> get_age(20, 'bob')   # 没有语法错误，但是语义不对
>>> get_age(age=20, name='bob')   # ok
>>> get_age(age=20, 'bob')   # 语法错误，key=val的形式，必须在后面
>>> get_age(20, name='bob')
# 20按函数定义的顺序传给了name，后面又指定name='bob'，所以name得到多个值，报错
>>> get_age('bob', age=20)   # OK

 def fun1(*args): # *表示传入的参数是元组
     print(args)

 def fun2(**kwargs):  #**表示传入的是字典
     print(kwargs)

 print(fun1('bob','tom','jerry'))
 print(fun2(name='bob',age=20))


 def add(x, y):
     return x + y


 def get_age(name, age):
     print('%s is %s years old' % (name, age))


 if __name__ == '__main__':
     nums = [10, 20]
     print(add(nums[0], nums[1]))
     print(add(*nums))  # *表示把nums拆开
     adict = {'age': 20, 'name': 'bob'}
     get_age(**adict)

随机生成两个100以内的数字
随机选择加法或是减法
总是使用大的数字减去小的数字
如果用户答错三次,程序给出正确答案


from random import randint, choice


def exam():
    nums = [randint(1, 100) for i in range(2)]
    nums.sort(reverse=True)
    op = choice('+-')
    if op == '+':
        result = nums[0] + nums[1]
    else:
        result = nums[0] - nums[1]
    prompt = '%s %s %s =' % (nums[0], op, nums[1])
    answer = int(input(prompt))
    if answer == result:
        print('答对了')
    else:
        print('答错了')


def mainMenu():
    while 1:
        exam()
        yn = input('Continue(y/n)').strip()[0]  # 取出用户第一个非空字符
        if yn in 'nN':
            print('\nbye')
            break


if __name__ == '__main__':
    mainMenu()
