一、程序员编写代码
[root@room8pc16 ~]# git init /tmp/myweb
[root@room8pc16 ~]# cd /tmp/myweb
[root@room8pc16 myweb]# cat index.html
<h1>My Web Site</h1>
[root@room8pc16 myweb]# git add .
[root@room8pc16 myweb]# git commit -m "myweb 1.0"
[root@room8pc16 myweb]# git tag 1.0  # 标记1.0版本的程序
[root@room8pc16 myweb]# git tag
1.0
[root@room8pc16 myweb]# cat index.html  # 继续开发
<h1>My Web Site</h1>
<h2>New line.</h2>
[root@room8pc16 myweb]# git add .
[root@room8pc16 myweb]# git commit -m "web web 2.0"
[root@room8pc16 myweb]# git tag 2.0
[root@room8pc16 myweb]# git tag
1.0
2.0
二、在gitlab上创建项目
1、在devops组下，创建一个名为myweb的共开项目
2、为用户授权，使用户成为myweb项目的主程序员
三、上传第一步的代码到gitlab
[root@room8pc16 myweb]# cd /tmp/myweb/
[root@room8pc16 myweb]# git remote rename origin old-origin
[root@room8pc16 myweb]# git remote add origin http://192.168.4.1/devops/myeb.git
[root@room8pc16 myweb]# git push -u origin --all
[root@room8pc16 myweb]# git push -u origin --tags

四、在jenkins上将web1.0下载下来
1、基本下载
首页 -> 新建任务 -> 任务名myweb(自由风格) -> 勾选参数化构建过程
添加参数 选择git parameter(用于指定下载gitlab上软件的哪个版本) name填写myweb
(就是自定义一个变量，将来软件版本号赋值给该变量); parameter tag选branch or tag;
-> 源码管理选git; Repository url填写你的git路径 http://192.168.4.1/devops/myeb.git
-> Branch specifier 填写$myweb(通过git parameter定义的) -> 保存
2、运行工程，将会把代码从gitlab上下载到jenkins的/var/lib/jenkins/workspace目录
点击工程 -> build with parameters -> 点击1.0版本 -> 开始构建

五、在jenkins上部署web服务器
jenkins下载的程序，最终是要部署到真正的应用服务器上。为了方便应用服务器下载，在
jenkins上安装httpd
1、安装
[root@node4 ~]# yum install -y httpd
[root@node4 ~]# systemctl start httpd
[root@node4 ~]# systemctl enable httpd
2、创建目录
/var/www/html/deploy/packages  用于存储在gitlab上下载的软件包和md5值文件
/var/www/html/deploy/  用于存储软件版本
[root@node4 ~]# mkdir -pv /var/www/html/deploy/packages
[root@node4 ~]# chown -R jenkins:jenkins /var/www/html/deploy/

六、修改jenkins任务，将下载的代码放到httpd家目录下，打包
1、修改
点击工程 -> 配置 -> Additional Behavious 选checkout to a subdirectory
(把下载的代码放到子目录中)，填写myweb-${myweb} -> 构建 -> 增加额外的构建步骤，
选执行shell，填写以下内容：
实现的功能是把下载的软件包拷贝到/var/www/html/deploy/packages中，并计算md5值，
然后在/var/www/html/deploy记录软件的当前版本和上一版本
deploy_dir=/var/www/html/deploy
cp -r myweb-${myweb} $deploy_dir/packages
cd $deploy_dir/packages
rm -rf myweb-${myweb}/.git
tar czf myweb-${myweb}.tar.gz myweb-${myweb}
md5sum myweb-${myweb}.tar.gz | awk '{print $1}' > myweb-${myweb}.tar.gz.md5
rm -rf myweb-${myweb}
cd $deploy_dir
[ -f livever ] && cat livever > lastver  # 把当前版本内容写到上一版本内容文件中
echo ${myweb} > livever  # 更新当前版本文件的版本号
2、验证
[root@node4 ~]# rm -rf /var/lib/jenkins/workspace/*
重新构建工程。构建完毕后，查看/var/www/html/deploy

七、应用服务器下载代码并完成部署
1、创建目录
/var/www/download  用于存储下载的软件包
/var/www/deploy    用于存储解压的软件包和软件版本信息
2、部署思路
将jenkins上的压缩软件包下载到/var/www/download目录，解压时，解压到/var/www/deploy
目录，部署时在/var/www/html/创建nsd1810的链接，指向要发布的版本目录

"""
has_new_ver: 用于检查是否有新版本
check_app: 用于检查下载的软件包是否损坏
deploy: 用于部署应用程序
"""
import os
import requests
import wget
import hashlib
import tarfile

def has_new_ver(ver_url, ver_fname):
    if not os.path.isfile(ver_fname):
        return True  # 如果本地没有版本文件，则认为有新版本的软件

    with open(ver_fname) as fobj:
        app_ver = fobj.read()

    r = requests.get(ver_url)
    if app_ver != r.text:
        return True   # 网上版本和本地版本不一样，意味着有新版本

    return False   # 网上版本和本地版本一样，则没有新版本

def check_app(app_fname, app_md5_url):
    r = requests.get(app_md5_url)
    remote_md5 = r.text.strip()  # 取出网上公布的md5值

    # 计算本地文件的md5值
    m = hashlib.md5()
    with open(app_fname, 'rb') as fobj:
        while True:
            data = fobj.read(4096)
            if not data:
                break
            m.update(data)

    if remote_md5 == m.hexdigest():  # 如果本地和网上的md5值一样，则文件未损坏
        return True

    return False

def deploy(app_fname):
    deploy_dir = '/var/www/deploy'
    # 解压文件到deploy目录
    os.chdir(deploy_dir)
    tar = tarfile.open(app_fname, 'r:gz')
    tar.extractall()
    tar.close()

    # 拼接出解压后目录的绝对路径
    app_path = os.path.basename(app_fname)
    app_path = app_path.replace('.tar.gz', '')
    app_path = os.path.join(deploy_dir, app_path)

    # 创建链接
    link = '/var/www/html/nsd1810'
    if os.path.exists(link):
        os.unlink(link)  # 如果有链接到老版本的链接，先删除
    os.symlink(app_path, link)

if __name__ == '__main__':
    ver_url = 'http://192.168.4.4/deploy/livever'
    ver_fname = '/var/www/deploy/livever'
    if not has_new_ver(ver_url, ver_fname):
        print('没有发现新版本')
        exit()

    # 有新版本，则下载最新的软件包
    r = requests.get(ver_url)
    app_ver = r.text.strip()  # 把版本字符串结尾的\n去除
    app_url = 'http://192.168.4.4/deploy/packages/myweb-%s.tar.gz' % app_ver
    download_dir = '/var/www/download'
    wget.download(app_url, download_dir)

    # 检查下载的文件是否损坏，本地文件算出的md5值，如果和网上提供的不一样，则损坏
    app_fname = '/var/www/download/myweb-%s.tar.gz' % app_ver
    app_md5_url = app_url + '.md5'
    if not check_app(app_fname, app_md5_url):
        print('下载的文件校验失败')
        exit(1)

    # 如果下载的软件未损坏，则更新本地版本文件
    with open(ver_fname, 'w') as fobj:   # 更新本地版本文件
        fobj.write(r.text)

    deploy(app_fname)  # 部署软件
